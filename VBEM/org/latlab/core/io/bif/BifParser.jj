/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.5";
  STATIC = false;
  UNICODE_INPUT = true;
}
PARSER_BEGIN(BifParser)
package org.latlab.core.io.bif;

import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import org.latlab.core.io.AbstractParser;
import org.latlab.core.io.BeliefNodeProperty;
import org.latlab.core.io.Properties;
import org.latlab.core.io.BeliefNodeProperty.ConnectionConstraint;
import org.latlab.core.model.BayesNet;
import org.latlab.core.model.BeliefNode;
import org.latlab.core.model.CGPotential;
import org.latlab.core.model.ContinuousBeliefNode;
import org.latlab.core.model.DiscreteBeliefNode;
import org.latlab.core.util.ContinuousVariable;
import org.latlab.core.util.DiscreteVariable;
import org.latlab.core.util.Function;
import org.latlab.core.util.JointContinuousVariable;
import org.latlab.core.util.SingularContinuousVariable;
import org.latlab.core.util.Variable;

/**
 * A parser for BIF file.
 */
@SuppressWarnings("all")
public class BifParser extends AbstractParser {
	public <T extends BayesNet> T parse(T network) throws org.latlab.core.io.ParseException {
		try {
			properties = new Properties();
			Network(network);
            return network;
		}
		catch (Throwable e) {
			throw new org.latlab.core.io.ParseException(e);
		}
	}


	public Properties getProperties() {
		return properties;
	}
	
	private static int computeNumberOfCells(List<DiscreteVariable> variables) {
		if (variables.size() == 0)
			return 0;

		int product = 1;
		for (DiscreteVariable v : variables) {
			product *= v.getStates().size();
		}
		
		return product;
	}
	
	/**
	 * Holds the properties of the nodes and network.  
	 * Properties are stored separately because they are related to the 
	 * presentation part and are not stored in the model part.
	 */
	private Properties properties;
}

PARSER_END(BifParser)

<DEFAULT> SPECIAL_TOKEN:
{
	<NEWLINE: "\r" | "\n" | "\r\n">
}

<*> TOKEN:
{
	<#DIGIT: ["0"-"9"]>
|	<#ALPHA: ["a"-"z","A"-"Z"]>
|	<#UNICODE_CHAR: ["\u0080"-"\uFFFF"]>
|	<#ALPHA_DASH: <ALPHA> | <UNICODE_CHAR> | ["-", "_"]>
|	<#ALPHA_DASH_SPACE: <ALPHA_DASH> | " ">
}

<*> SKIP: // white space
{
 	" "
|	"\t"
}

<*> SPECIAL_TOKEN: // comments
{
	<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* (<NEWLINE>)>
}

<DEFAULT> TOKEN: // keywords
{
	<NETWORK: "network">
|	<VARIABLE: "variable">
|	<PROBABILITY: "probability">
|	<TYPE: "type">
|	<DISCRETE: "discrete">
|	<CONTINUOUS: "continuous">
|	<DEFAULT_VALUE: "default">
|	<TABLE: "table">
|	<PROPERTY: "property"> : PROPERTY_STATE
}

// the definition of the numeric tokens may need to be improved later.

<*> TOKEN:
{
	<#EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+>
|	<NON_NEGATIVE_INTEGER: (<DIGIT>)+>
|	<NON_NEGATIVE_FLOAT: (<DIGIT>)+ 
	| (<DIGIT>)* "." (<DIGIT>)+
	| (<DIGIT>)* ("."(<DIGIT>)+)? <EXPONENT>
	>
|	<NEGATIVE_FLOAT: "-"<NON_NEGATIVE_FLOAT> >
}

<DEFAULT> TOKEN:
{
	<IDENTIFIER: "\"" (~["\""])* "\"">
// |	<IDENTIFIER: "\"" (<ALPHA_DASH>)+ (<ALPHA_DASH> | <DIGIT>)* "\"">
}

<PROPERTY_STATE> TOKEN:
{
	<PROPERTY_DOUBLE_QUOTE: "\"">
|	<POSITION: "position">
|	<ROTATION: "rotation">
|	<FRAME: "frame">
|	<LABEL: "label">
|	<FORECOLOR: "foreColor">
|	<BACKCOLOR: "backColor">
|	<LINECOLOR: "lineColor">
|	<FONT: "font">
|	<FONTSIZE: "fontSize">
|	<CONNECTION_CONSTRAINT: "connectionConstraint">
|	<NONE: "none">
|	<OVAL: "oval">
|	<RECTANGLE: "rectangle">
|	<PROPERTY_EQUAL: "=">
|	<PROPERTY_LPARENTHESE: "(">
|	<PROPERTY_RPARENTHESE: ")">
|	<PROPERTY_COMMA: ",">
|	<PROPERTY_END_CHAR: ";"> : DEFAULT
|	<SINGLE_QUOTED_STRING: "'" (~["'"])* "'">
}

void Network(BayesNet network ) :
{ 
}
{
	NetworkDeclaration(network) 
	(VariableDeclaration(network))* 
	(ProbabilityDeclaration(network))* 
	<EOF> 
}

void NetworkDeclaration(BayesNet network) :
{ String name = null; }
{
	<NETWORK> name=IdentifierValue() "{" "}" { network.setName(name); }
}

void VariableDeclaration(BayesNet network) :
{ 
	String name;
	BeliefNode node = null;
}
{
	<VARIABLE> name=IdentifierValue()
	"{"	
		( node=VariableTypeDeclaration(network, name) ) 
		(VariableProperty(node))*
	"}"
}

void ProbabilityDeclaration(BayesNet network) :
{ 
	List<Variable> nodeVariables = new ArrayList<Variable>();
	List<Variable> parents = new ArrayList<Variable>();
	List<DiscreteVariable> discreteVariables;
	ContinuousBeliefNode continuousNode = null;
	DiscreteBeliefNode discreteNode = null;
	BeliefNode node;
	Function function = null;
	CGPotential potential = null;
	boolean discrete = true;
}
{
	<PROBABILITY> "(" 
		VariablesInProbabilityDeclaration(network, nodeVariables, parents)
		{
			discreteVariables = 
				new ArrayList<DiscreteVariable>(
					nodeVariables.size() + parents.size());
			Variable first = nodeVariables.get(0);
			node = network.getNode(first);
			if (node instanceof ContinuousBeliefNode) {
				if (nodeVariables.size() > 1) {
					// combine the nodes of other variables to the first
					// node to form a composite node if necessary
					List<ContinuousBeliefNode> nodes = 
						new ArrayList<ContinuousBeliefNode>(nodeVariables.size());
					
					for (int i = 0; i < nodeVariables.size(); i++) {
						nodes.add(network.getNode(
							(ContinuousVariable) nodeVariables.get(i)));
					}
					
					node = network.combine(true, nodes);
					properties.combine((ContinuousBeliefNode) node, nodes);
				}
				
				continuousNode = (ContinuousBeliefNode) node;
				discrete = false;
			} else if (node instanceof DiscreteBeliefNode) {
				discreteNode = (DiscreteBeliefNode) node;
				discrete = true;
				
				discreteVariables.add((DiscreteVariable) first);
			} else {
				String message = String.format(
					"The belief node %s has an unexpected type.",
					first.getName());
				throw new ParseException(message);
			} 
			
			// add the parents to the current node
			for (Variable parent : parents) {
				network.addEdge(node, network.getNode(parent.getName()));
				discreteVariables.add((DiscreteVariable) parent);
			}
		}
	")" "{" 
		[ LOOKAHEAD( { discrete } )
			function=DiscreteProbabilityDefinition(discreteVariables) 
			{ discreteNode.setCpt(function); }
		]
		[ LOOKAHEAD( { !discrete } )
			potential=ContinuousProbabilityDefinition(
				continuousNode.getVariable(), discreteVariables) 
			{ continuousNode.setPotential(potential); }
		]
		
	"}"
}

/**
 * Parses the variables in the probability declaration.  The variables
 * after the {@code |} character are considered to be parent variables.
 * If the first variable is discrete, all the variables after that variable
 * are considered to be continuous.
 *
 * The parsed variables are put into the given list.  These lists should have
 * been constructed.
 */
void VariablesInProbabilityDeclaration(
	BayesNet network, List<Variable> nodes, List<Variable> parents) :
{
	String nodeName;
	BeliefNode node;
	boolean isParent = false; 
}
{
	nodeName=IdentifierValue() 
	{ 
		node = (BeliefNode) network.getNode(nodeName);
		if (node == null) {
			String message = String.format(
				"The variable %s indicated in probability definition is not found",
				nodeName);
			throw new ParseException(message);
		}
		nodes.add(node.getVariable());
		
		// the next variable must be a parent if the first one is a discrete
		// variable
		isParent = node.getVariable() instanceof DiscreteVariable;
	}
	( 
	  	// a possible delimiter between the variable names
	  	(","
	  	| "|" { isParent = true; }
	  	)? 
	  	
	  	nodeName=IdentifierValue() 
		{ 
			node = (BeliefNode) network.getNode(nodeName);

			// network.addEdge(node, parentNode);
			if (isParent)
				parents.add(node.getVariable());
			else
				nodes.add(node.getVariable());
		}
	)* 
}

/**
	Reads a probability definition for a given node.
	The first variable in the argument is the node variable, and the
	remaining variables (if exist) are the parent variables.
	The probabilities specified in the file depend on the order 
	of these variables.
*/
Function DiscreteProbabilityDefinition(List<DiscreteVariable> variables) :
{
	double probability;
	Function function = Function.createFunction(variables);
}
{
	<TABLE> 
	{ 
		int numberOfCells = computeNumberOfCells(variables);
		ArrayList<Double> cells = new ArrayList<Double>(numberOfCells);
	} 
	( 
		probability=NonNegativeFloat()
		{ cells.add(probability); }
	)+ ";" 
	{
		function.setCells(variables, cells);
		return function; 
	}
|	(
		// JavaCC generates a warning of choice conflict here.  Probably it is
		// related to the similar structure with continuous probability table.
		// As it seems to work properly now, it is ignored at this moment.
		"(" 
		{ 
			ArrayList<Integer> states = 
				new ArrayList<Integer>(variables.size());
			states.add(0);	// start the child state from zero
			int stateIndex;
		}
		( 
			// the states.size() indicate the index of the next parent
			stateIndex = State(variables.get(states.size()))
			{ 
				states.add(stateIndex);
			}
		)+ 
			
		")" 
		{ 
			if (states.size() != variables.size())
				throw new ParseException(
					String.format(
						"The parent states of variable %s are not completed specified.", 
						variables.get(0).getName()));
		}
		(
			probability=NonNegativeFloat()
			{
				function.setCell(variables, states, probability);
				states.set(0, states.get(0) + 1);
			}
		)+ 
		{
			if (states.get(0) != variables.get(0).getStates().size())
				throw new ParseException(
					String.format("The probabilities of the variable %s are not specified for all of the states.",
						variables.get(0).getName()));
		}
		";"
	)+ 
	{ return function; }
}

/**
	Reads a probability definition for a given node.
	The first variable in the argument is the node variable, and the
	remaining variables (if exist) are the parent variables.
	The probabilities specified in the file depend on the order 
	of these variables.
*/
CGPotential ContinuousProbabilityDefinition(
	JointContinuousVariable joint, List<DiscreteVariable> parents) :
{
	double entry;
	
	
	if (parents.size() > 1) {
		String message = String.format(
			"It currently does not support a continuous variable to have more than one parent, " +
			"while the continuous variable %s has more than one parents: %s",
			joint.getName(), parents.toString());
		throw new ParseException(message);
	}
			
	DiscreteVariable parent = parents.size() == 0? null : parents.get(0);
	CGPotential potential = new CGPotential(joint, parent);
	int expectedSize;
}
{
	<TABLE> 
	{ 
		expectedSize = potential.expectedNumberOfEntries();
		List<Double> entries = new ArrayList<Double>(expectedSize);
	} 
	( 
		entry=RealNumber()
		{ entries.add(entry); }
	)+ ";" 
	{
		if (entries.size() != expectedSize) {
			String message = String.format(
				"The table entries of %s | %s do not have the correct number.",
				joint.getName(), parents.toString());
			throw new ParseException(message);
		}
		potential.setEntries(parents, entries);
		return potential; 
	}
|	(
		{ 	
			int stateIndex;
			expectedSize = potential.expectedNumberOfEntriesPerConfig();
			entries = new ArrayList<Double>(expectedSize);
			List<Integer> states = new ArrayList<Integer>(parents.size());
		}
			
		// list the configuration of states
		"(" 
		{
			entries.clear();
			states.clear(); 
		}
		( 
			// the states.size() indicate the index of the next parent
			stateIndex = State(parents.get(states.size()))
			{ 
				if (stateIndex < 0) {
					String message = String.format(
						"The probability definition of variable %s includes a" + 
							" state not found in its parent variable %s.",
						joint.getName(), parents.toString());
					throw new ParseException(message);
				}
				
				states.add(stateIndex);
			}
		)+ 
			
		")" 
		{ 
			if (states.size() != parents.size()) {
				String message = String.format(
					"The parent states of %s | %s are not completely specified.",
					joint.getName(), parents.toString());
				throw new ParseException(message);
			}
		}
		// list the entries for this configuration
		(
			entry=RealNumber()
			{
				entries.add(entry);
			}
		)+ 
		{
			if (entries.size() != expectedSize) {
				String message = String.format(
					"The entries of %s | %s do not have the correct number.",
					joint.getName(), parents.toString());
				throw new ParseException(message);
			}
			potential.setEntries(parents, states, entries);
		}
		";"
	)+ 
	{ return potential; }
}

BeliefNode VariableTypeDeclaration(BayesNet network, String name) :
{ 
	List<String> states;
	BeliefNode node;
}
{
	<TYPE> 
(
	( states=DiscreteVariableStatesDeclaration() ) 
	{ 
		node = network.addNode(new DiscreteVariable(name, states));
		return node; 
	}
|	( ContinuousVariableDeclaration() )
	{ 
		node = network.addNode(new SingularContinuousVariable(name)); 
		return node;
	}
)
}

ArrayList<String> DiscreteVariableStatesDeclaration() :
{ 
	int numberOfStates;
	String state;
	ArrayList<String> states;
}
{
	<DISCRETE> "[" numberOfStates=NonNegativeInteger() "]" 
		{ states = new ArrayList<String>(numberOfStates); }
	"{" (state=IdentifierValue() { states.add(state); } (",")? )+ "}" (";")?
	{ 
		if (numberOfStates != states.size()) {
			String message = String.format(
				"The number of states { %s } (%d)" +
					" does not match that declared (%d).",
				states.toString(), states.size(), numberOfStates);
			throw new ParseException(message);
		}
		return states; 
	}
}

void ContinuousVariableDeclaration() :
{ }
{
	<CONTINUOUS> (";")?
}

void VariableProperty(BeliefNode node) :
{ BeliefNodeProperty property = properties.getBeliefNodeProperty(node); }
{
	<PROPERTY> VariablePropertyString(property) <PROPERTY_END_CHAR>
}

// Reads a property string from the input and put it into the property object.
void VariablePropertyString(BeliefNodeProperty property) :
{ 
	int x;
	int y;
	int angle;
	BeliefNodeProperty.FrameType frame;
	String text;
	Color color;
}
{
	(
	<PROPERTY_DOUBLE_QUOTE> (
	(<POSITION> <PROPERTY_EQUAL> <PROPERTY_LPARENTHESE> 
		x=NonNegativeInteger() <PROPERTY_COMMA> 
		y=NonNegativeInteger() <PROPERTY_RPARENTHESE>)
	{
		property.setPosition(new Point(x,y));
	}
| 	(<ROTATION> <PROPERTY_EQUAL> angle=NonNegativeInteger())
	{
		property.setRotation(angle);
	}
|	(<FRAME> <PROPERTY_EQUAL> frame= FrameType())
	{
		property.setFrame(frame);
	}
|	(<LABEL> <PROPERTY_EQUAL> text=QuotedStringValue())
	{
		property.setLabel(text);
	}
|	(<FORECOLOR> <PROPERTY_EQUAL> color=ColorValue())
	{
		property.setForeColor(color);
	}
|	(<BACKCOLOR> <PROPERTY_EQUAL> color=ColorValue())
	{
		property.setBackColor(color);
	}
|   (<LINECOLOR> <PROPERTY_EQUAL> color=ColorValue())
	{
		property.setLineColor(color);
	}
|	(<FONT> <PROPERTY_EQUAL> text=QuotedStringValue())
	{
		property.setFontName(text);
	}
|	(<FONTSIZE> <PROPERTY_EQUAL> x=NonNegativeInteger())
	{
		property.setFontSize(x);
	}
|	(<CONNECTION_CONSTRAINT> <PROPERTY_EQUAL> text=QuotedStringValue())
	{
		property.setConnectionConstraint(
			Enum.valueOf(ConnectionConstraint.class, text));
	}
	) <PROPERTY_DOUBLE_QUOTE>
	)
}

String IdentifierValue() :
{ Token t; }
{
	t = <IDENTIFIER> {
		return t.image.substring(1, t.image.length() - 1);
	}
}

String QuotedStringValue() :
{ Token t; }
{
	t = <SINGLE_QUOTED_STRING> { 
		// trim the quotes
		return t.image.substring(1, t.image.length() - 1); 
	}
}

int State(DiscreteVariable variable) :
{
	String name;
}
{
	name=IdentifierValue() { return variable.indexOf(name); }
}

int NonNegativeInteger() :
{ Token t; }
{
	t=<NON_NEGATIVE_INTEGER> { return Integer.parseInt(t.image); }
}

double NonNegativeFloat() :
{ Token t; }
{
	t=<NON_NEGATIVE_FLOAT> { return Double.parseDouble(t.image); }
|   "NaN" { return Double.NaN; }
}

double RealNumber() :
{ Token t; }
{
(
	(
		t=<NON_NEGATIVE_FLOAT> 
	|	t=<NEGATIVE_FLOAT>
	|	t=<NON_NEGATIVE_INTEGER>
	)
		{ return Double.parseDouble(t.image); }
|   "NaN" { return Double.NaN; }
)
}

BeliefNodeProperty.FrameType FrameType() :
{ BeliefNodeProperty.FrameType type; }
{
	( 
	<NONE> { type = BeliefNodeProperty.FrameType.NONE; }
|	<OVAL> { type = BeliefNodeProperty.FrameType.OVAL; }
|	<RECTANGLE> { type = BeliefNodeProperty.FrameType.RECTANGLE; }
	)
	{ return type; }
}

Color ColorValue() :
{ int r, g, b; }
{
	<PROPERTY_LPARENTHESE> r = NonNegativeInteger() <PROPERTY_COMMA> 
	g = NonNegativeInteger() <PROPERTY_COMMA> 
	b = NonNegativeInteger() <PROPERTY_RPARENTHESE>
	{ return new Color(r,g,b); }
}
