/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
  STATIC = false;
  UNICODE_INPUT = true;
}
PARSER_BEGIN(ArffParser)

package org.latlab.core.data.io.arff;

import org.latlab.core.data.MixedDataSet;
import org.latlab.core.data.Instance;

//import org.latlab.core.data.io.IntegerText;

import org.latlab.core.util.Variable;
import org.latlab.core.util.DiscreteVariable;
import org.latlab.core.util.SingularContinuousVariable;


import java.io.InputStream;

import java.util.List;
import java.util.ArrayList;

@SuppressWarnings({ "unused", "serial" })
public class ArffParser {
	public static MixedDataSet parse(InputStream stream) throws ParseException {
		ArffParser parser = new ArffParser(stream, "UTF-8");
		return parser.Arff();
	}
}
PARSER_END(ArffParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
SPECIAL_TOKEN:
{
	<NEWLINE: "\r" | "\n" | "\r\n">
}
SPECIAL_TOKEN: // comments
{
	<SINGLE_LINE_COMMENT: "%" (~["\n","\r"])* (<NEWLINE>)>
}
TOKEN :
{
	<#ALPHA: ["a"-"z", "A"-"Z"]>
|   <#DIGIT: ["0"-"9"] >
|	<#UNICODE_CHAR: ["\u0080"-"\uFFFF"]>
|	<#SPACE: [" ", "\r", "\t", "\n"]>
}
TOKEN [IGNORE_CASE]: 
{
	<RELATION: "@relation">
|	<ATTRIBUTE: "@attribute">
|	<DATA: "@data">
| 	<REAL:"real" >
| 	<NUMERIC:"numeric" >
| 	<INTEGER:"integer">
}
TOKEN: // floating point numbers
{
	<#EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+>
|	<INTEGER_LITERAL: (["+","-"])?(<DIGIT>)+>
|	<FLOAT_LITERAL: (["+","-"])?(<DIGIT>)+ 
	| (["+","-"])?(<DIGIT>)* "." (<DIGIT>)+
	| (["+","-"])?(<DIGIT>)* ("."(<DIGIT>)+)? <EXPONENT>
	>
|   <DQUOTED_STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | 
		"\\" ( ["n","t","b","r","f","\\","\'","\""] | 
			["0"-"7"] (["0"-"7"])?  | 
			["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n"))
		)* "\"">
| 	<SQUOTED_STRING_LITERAL: "\'" ( ~["\'","\\","\n","\r"] | 
		"\\" ( ["n","t","b","r","f","\\","\'","\""] | 
			["0"-"7"] (["0"-"7"])?  | 
			["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n"))
		)* "\'">
|	<STRING_LITERAL: (<DIGIT> | <ALPHA> | <UNICODE_CHAR>) 
		(~[" ", "\t", "\r", "\n", ",", "{", "}", "[", "]" ])*>
}

MixedDataSet Arff():
{
	String name;
	Variable variable;
	List<Variable> variables = new ArrayList<Variable>();
	List<Instance> instances;
}
{
	name = Relation()
	(
	  variable = Attribute() { variables.add(variable); }
	)*
	instances=Data(variables)
	<EOF>
	{
	  return new MixedDataSet(name, variables, instances);
	}
}
String Relation():
{
	String name;
}
{
	<RELATION> name=StringLiteral() { return name; }
}
Variable Attribute():
{
	Variable variable;
	String name;
	String state;
	List<String> states;
}
{
	<ATTRIBUTE> name=StringLiteral() 
	(
		states=NominalSpecification()
		{
		  variable = new DiscreteVariable(name, states);
		}
	|	(<REAL> | <NUMERIC>)
		{ variable = new SingularContinuousVariable(name); }
	|	<INTEGER> ("[" <INTEGER_LITERAL> "," <INTEGER_LITERAL> "]")? 
		{ variable = new SingularContinuousVariable(name); }
	)
	{
	  return variable;
	}
}

List<String> NominalSpecification():
{
	List<String> states = new ArrayList<String>();
}
{
	"{"
		 NominalState(states) ("," NominalState(states))*
	"}"
	
	{	return states;	}
}
void NominalState(List<String> states):
{
	String state;
	Token t;
}
{
	(
	state=StringLiteral() { states.add(state); }
|	t=<INTEGER_LITERAL> { states.add(t.image); }
	)
}
List<Instance> Data(List<Variable> variables):
{
	Instance instance;
	List<Instance> instances = new ArrayList<Instance>();
}
{
	<DATA>
	(
		instance=Instance(variables) { instances.add(instance); }
	)*
	{
	  return instances;
	}
}
Instance Instance(List<Variable> variables):
{
	List<String> values = new ArrayList<String>(variables.size());
	double weight = 1;
}
{
  	
	Value(values) (LOOKAHEAD(2) "," Value(values))*
		("," "{" weight=FloatLiteral() "}")?
	{
	  return Instance.create(variables, values, weight);
	}
}
void Value(List<String> values):
{
	String value;
	Token t;
}
{
	(
	value=StringLiteral() { values.add(value); }
|	t=<INTEGER_LITERAL> { values.add(t.image); }
|	t=<FLOAT_LITERAL> { values.add(t.image); }
|	"?" { values.add(null); }
	)
}
String StringLiteral():
{
	Token t;
	String value;
}
{
	(
		t=<DQUOTED_STRING_LITERAL> 
			{ value = t.image.substring(1, t.image.length() -1); }
	|	t=<SQUOTED_STRING_LITERAL>
			{ value = t.image.substring(1, t.image.length() -1); }
	|	t=<STRING_LITERAL>
			{ value = t.image; }
	|	t=<REAL>
			{ value = t.image;}
	|  	t=<NUMERIC>
			{ value = t.image;}
	|  	t=<INTEGER>
		{value = t.image;}
	)
	{
		return value;
	}
}
int IntegerLiteral():
{
	Token t;
}
{
  	t=<INTEGER_LITERAL>
  	{
  	  return Integer.parseInt(t.image);
  	}
 }
double FloatLiteral():
{
	Token t;
}
{
  	t=<FLOAT_LITERAL>
  	{
  	  return Double.parseDouble(t.image);
  	}
 }
